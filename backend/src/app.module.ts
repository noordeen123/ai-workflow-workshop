import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { User } from './entities/user.entity';\nimport { Board } from './entities/board.entity';\nimport { Task } from './entities/task.entity';\nimport { AuthController } from './controllers/auth.controller';\nimport { BoardController } from './controllers/board.controller';\nimport { TaskController } from './controllers/task.controller';\nimport { AuthService } from './services/auth.service';\nimport { BoardService } from './services/board.service';\nimport { TaskService } from './services/task.service';\nimport { AuthGuard } from './guards/auth.guard';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('DB_HOST', 'localhost'),\n        port: configService.get('DB_PORT', 5432),\n        username: configService.get('DB_USERNAME', 'postgres'),\n        password: configService.get('DB_PASSWORD', 'password'),\n        database: configService.get('DB_NAME', 'taskflow'),\n        entities: [User, Board, Task],\n        synchronize: configService.get('NODE_ENV') !== 'production',\n        logging: configService.get('NODE_ENV') === 'development',\n      }),\n      inject: [ConfigService],\n    }),\n    TypeOrmModule.forFeature([User, Board, Task]),\n  ],\n  controllers: [AuthController, BoardController, TaskController],\n  providers: [AuthService, BoardService, TaskService, AuthGuard],\n})\nexport class AppModule {}